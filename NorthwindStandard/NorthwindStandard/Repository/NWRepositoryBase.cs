// <auto-generated>
using System;
using System.Data.Entity;
using System.Linq;
using NorWnd.Repository.Entities.NW;
using NorWnd.Repository.Interface;
using CodeGenHero.EAMVCXamPOCO;
using appEnums = CodeGenHero.EAMVCXamPOCO.Enums;

namespace NorWnd.Repository
{
	public abstract class NWRepositoryBase : INWRepositoryCrud
	{
		private NWDataContext _ctx;

		public NWRepositoryBase(NWDataContext ctx)
		{
			_ctx = ctx;

			// Disable lazy loading - if not, related properties are auto-loaded when
			// they are accessed for the first time, which means they'll be included when
			// we serialize (b/c the serialization process accesses those properties).

			// We don't want that, so we turn it off.  We want to eagerly load them (using Include) manually.

			ctx.Configuration.LazyLoadingEnabled = false;

			if (System.Diagnostics.Debugger.IsAttached)
			{   // Write EF queries to the output console.
				ctx.Database.Log = x => System.Diagnostics.Debug.WriteLine(x);
			}
		}

		#region Generic Operations

		private RepositoryActionResult<TEntity> Delete<TEntity>(TEntity item) where TEntity : class
		{
			try
			{
				if (item == null)
				{
					return new RepositoryActionResult<TEntity>(null, appEnums.RepositoryActionStatus.NotFound);
				}

				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Remove(item);
				_ctx.SaveChanges();
				return new RepositoryActionResult<TEntity>(null, appEnums.RepositoryActionStatus.Deleted);
			}
			catch(Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, appEnums.RepositoryActionStatus.Error, ex);
			}
		}

		public IQueryable<TEntity> GetQueryable<TEntity>() where TEntity : class
		{
			return _ctx.Set<TEntity>();
		}

		public RepositoryActionResult<TEntity> Insert<TEntity>(TEntity item) where TEntity : class
		{
			try
			{
				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Add(item);
				var result = _ctx.SaveChanges();
				if (result > 0)
				{
					return new RepositoryActionResult<TEntity>(item, appEnums.RepositoryActionStatus.Created);
				}
				else
				{
					return new RepositoryActionResult<TEntity>(item, appEnums.RepositoryActionStatus.NothingModified, null);
				}
			}
			catch(Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, appEnums.RepositoryActionStatus.Error, ex);
			}
		}

		private RepositoryActionResult<TEntity> Update<TEntity>(TEntity item, TEntity existingItem) where TEntity : class
		{
			try
			{ // only update when a record already exists for this id
				if (existingItem == null)
				{
					return new RepositoryActionResult<TEntity>(item, appEnums.RepositoryActionStatus.NotFound);
				}

				// change the original entity status to detached; otherwise, we get an error on attach as the entity is already in the dbSet
				// set original entity state to detached
				_ctx.Entry(existingItem).State = EntityState.Detached;
				DbSet<TEntity> itemSet = _ctx.Set<TEntity>();
				itemSet.Attach(item); // attach & save
				_ctx.Entry(item).State = EntityState.Modified; // set the updated entity state to modified, so it gets updated.

				var result = _ctx.SaveChanges();
				if (result > 0)
				{
					return new RepositoryActionResult<TEntity>(item, appEnums.RepositoryActionStatus.Updated);
				}
				else
				{
					return new RepositoryActionResult<TEntity>(item, appEnums.RepositoryActionStatus.NothingModified, null);
				}
			}
			catch (Exception ex)
			{
				return new RepositoryActionResult<TEntity>(null, appEnums.RepositoryActionStatus.Error, ex);
			}
		}

		#endregion Generic Operations

		#region Insert Operations

		public RepositoryActionResult<Category> Insert(Category item)
		{
			return Insert<Category>(item);
		}
		public RepositoryActionResult<CustomerCustomerDemo> Insert(CustomerCustomerDemo item)
		{
			return Insert<CustomerCustomerDemo>(item);
		}
		public RepositoryActionResult<CustomerDemographic> Insert(CustomerDemographic item)
		{
			return Insert<CustomerDemographic>(item);
		}
		public RepositoryActionResult<Customer> Insert(Customer item)
		{
			return Insert<Customer>(item);
		}
		public RepositoryActionResult<Employee> Insert(Employee item)
		{
			return Insert<Employee>(item);
		}
		public RepositoryActionResult<EmployeeTerritory> Insert(EmployeeTerritory item)
		{
			return Insert<EmployeeTerritory>(item);
		}
		public RepositoryActionResult<OrderDetail> Insert(OrderDetail item)
		{
			return Insert<OrderDetail>(item);
		}
		public RepositoryActionResult<Order> Insert(Order item)
		{
			return Insert<Order>(item);
		}
		public RepositoryActionResult<Product> Insert(Product item)
		{
			return Insert<Product>(item);
		}
		public RepositoryActionResult<Region> Insert(Region item)
		{
			return Insert<Region>(item);
		}
		public RepositoryActionResult<Shipper> Insert(Shipper item)
		{
			return Insert<Shipper>(item);
		}
		public RepositoryActionResult<Supplier> Insert(Supplier item)
		{
			return Insert<Supplier>(item);
		}
		public RepositoryActionResult<Sysdiagram> Insert(Sysdiagram item)
		{
			return Insert<Sysdiagram>(item);
		}
		public RepositoryActionResult<Territory> Insert(Territory item)
		{
			return Insert<Territory>(item);
		}

		#endregion

		#region GetQueryable

		public IQueryable<Category> GetQueryableCategory()
		{
			return _ctx.Set<Category>();
		}
		public IQueryable<CustomerCustomerDemo> GetQueryableCustomerCustomerDemo()
		{
			return _ctx.Set<CustomerCustomerDemo>();
		}
		public IQueryable<CustomerDemographic> GetQueryableCustomerDemographic()
		{
			return _ctx.Set<CustomerDemographic>();
		}
		public IQueryable<Customer> GetQueryableCustomer()
		{
			return _ctx.Set<Customer>();
		}
		public IQueryable<Employee> GetQueryableEmployee()
		{
			return _ctx.Set<Employee>();
		}
		public IQueryable<EmployeeTerritory> GetQueryableEmployeeTerritory()
		{
			return _ctx.Set<EmployeeTerritory>();
		}
		public IQueryable<OrderDetail> GetQueryableOrderDetail()
		{
			return _ctx.Set<OrderDetail>();
		}
		public IQueryable<Order> GetQueryableOrder()
		{
			return _ctx.Set<Order>();
		}
		public IQueryable<Product> GetQueryableProduct()
		{
			return _ctx.Set<Product>();
		}
		public IQueryable<Region> GetQueryableRegion()
		{
			return _ctx.Set<Region>();
		}
		public IQueryable<Shipper> GetQueryableShipper()
		{
			return _ctx.Set<Shipper>();
		}
		public IQueryable<Supplier> GetQueryableSupplier()
		{
			return _ctx.Set<Supplier>();
		}
		public IQueryable<Sysdiagram> GetQueryableSysdiagram()
		{
			return _ctx.Set<Sysdiagram>();
		}
		public IQueryable<Territory> GetQueryableTerritory()
		{
			return _ctx.Set<Territory>();
		}

		#endregion

		#region Get FirstOrDefault

			public Category GetCategory(int categoryId)
			{
				return _ctx.Categories.Where(x => x.CategoryId == categoryId).FirstOrDefault();
			}
			public Category GetFirstOrDefault(Category item)
			{
				return _ctx.Categories.Where(x => x.CategoryId == item.CategoryId).FirstOrDefault();
			}
			public CustomerCustomerDemo GetCustomerCustomerDemo(string customerId, string customerTypeId)
			{
				return _ctx.CustomerCustomerDemos.Where(
						x => x.CustomerId == customerId
						&& x.CustomerTypeId == customerTypeId).FirstOrDefault();
			}
			public CustomerCustomerDemo GetFirstOrDefault(CustomerCustomerDemo item)
			{
				return _ctx.CustomerCustomerDemos.Where(
						x => x.CustomerId == item.CustomerId
						&& x.CustomerTypeId == item.CustomerTypeId).FirstOrDefault();
			}
			public CustomerDemographic GetCustomerDemographic(string customerTypeId)
			{
				return _ctx.CustomerDemographics.Where(x => x.CustomerTypeId == customerTypeId).FirstOrDefault();
			}
			public CustomerDemographic GetFirstOrDefault(CustomerDemographic item)
			{
				return _ctx.CustomerDemographics.Where(x => x.CustomerTypeId == item.CustomerTypeId).FirstOrDefault();
			}
			public Customer GetCustomer(string customerId)
			{
				return _ctx.Customers.Where(x => x.CustomerId == customerId).FirstOrDefault();
			}
			public Customer GetFirstOrDefault(Customer item)
			{
				return _ctx.Customers.Where(x => x.CustomerId == item.CustomerId).FirstOrDefault();
			}
			public Employee GetEmployee(int employeeId)
			{
				return _ctx.Employees.Where(x => x.EmployeeId == employeeId).FirstOrDefault();
			}
			public Employee GetFirstOrDefault(Employee item)
			{
				return _ctx.Employees.Where(x => x.EmployeeId == item.EmployeeId).FirstOrDefault();
			}
			public EmployeeTerritory GetEmployeeTerritory(int employeeId, string territoryId)
			{
				return _ctx.EmployeeTerritories.Where(
						x => x.EmployeeId == employeeId
						&& x.TerritoryId == territoryId).FirstOrDefault();
			}
			public EmployeeTerritory GetFirstOrDefault(EmployeeTerritory item)
			{
				return _ctx.EmployeeTerritories.Where(
						x => x.EmployeeId == item.EmployeeId
						&& x.TerritoryId == item.TerritoryId).FirstOrDefault();
			}
			public OrderDetail GetOrderDetail(int orderId, int productId)
			{
				return _ctx.Order Details.Where(
						x => x.OrderId == orderId
						&& x.ProductId == productId).FirstOrDefault();
			}
			public OrderDetail GetFirstOrDefault(OrderDetail item)
			{
				return _ctx.Order Details.Where(
						x => x.OrderId == item.OrderId
						&& x.ProductId == item.ProductId).FirstOrDefault();
			}
			public Order GetOrder(int orderId)
			{
				return _ctx.Orders.Where(x => x.OrderId == orderId).FirstOrDefault();
			}
			public Order GetFirstOrDefault(Order item)
			{
				return _ctx.Orders.Where(x => x.OrderId == item.OrderId).FirstOrDefault();
			}
			public Product GetProduct(int productId)
			{
				return _ctx.Products.Where(x => x.ProductId == productId).FirstOrDefault();
			}
			public Product GetFirstOrDefault(Product item)
			{
				return _ctx.Products.Where(x => x.ProductId == item.ProductId).FirstOrDefault();
			}
			public Region GetRegion(int regionId)
			{
				return _ctx.Regions.Where(x => x.RegionId == regionId).FirstOrDefault();
			}
			public Region GetFirstOrDefault(Region item)
			{
				return _ctx.Regions.Where(x => x.RegionId == item.RegionId).FirstOrDefault();
			}
			public Shipper GetShipper(int shipperId)
			{
				return _ctx.Shippers.Where(x => x.ShipperId == shipperId).FirstOrDefault();
			}
			public Shipper GetFirstOrDefault(Shipper item)
			{
				return _ctx.Shippers.Where(x => x.ShipperId == item.ShipperId).FirstOrDefault();
			}
			public Supplier GetSupplier(int supplierId)
			{
				return _ctx.Suppliers.Where(x => x.SupplierId == supplierId).FirstOrDefault();
			}
			public Supplier GetFirstOrDefault(Supplier item)
			{
				return _ctx.Suppliers.Where(x => x.SupplierId == item.SupplierId).FirstOrDefault();
			}
			public Sysdiagram GetSysdiagram(int diagramId)
			{
				return _ctx.sysdiagrams.Where(x => x.DiagramId == diagramId).FirstOrDefault();
			}
			public Sysdiagram GetFirstOrDefault(Sysdiagram item)
			{
				return _ctx.sysdiagrams.Where(x => x.DiagramId == item.DiagramId).FirstOrDefault();
			}
			public Territory GetTerritory(string territoryId)
			{
				return _ctx.Territories.Where(x => x.TerritoryId == territoryId).FirstOrDefault();
			}
			public Territory GetFirstOrDefault(Territory item)
			{
				return _ctx.Territories.Where(x => x.TerritoryId == item.TerritoryId).FirstOrDefault();
			}
		#endregion Get FirstOrDefault

		#region Update

		public RepositoryActionResult<Category> Update(Category item)
		{
			return Update<Category>(item, _ctx.Categories.FirstOrDefault(x => x.CategoryId == item.CategoryId));
		}
		public RepositoryActionResult<CustomerCustomerDemo> Update(CustomerCustomerDemo item)
		{
			return Update<CustomerCustomerDemo>(item, _ctx.CustomerCustomerDemos.FirstOrDefault(
					x => x.CustomerId == item.CustomerId
					&& x.CustomerTypeId == item.CustomerTypeId));
		}
		public RepositoryActionResult<CustomerDemographic> Update(CustomerDemographic item)
		{
			return Update<CustomerDemographic>(item, _ctx.CustomerDemographics.FirstOrDefault(x => x.CustomerTypeId == item.CustomerTypeId));
		}
		public RepositoryActionResult<Customer> Update(Customer item)
		{
			return Update<Customer>(item, _ctx.Customers.FirstOrDefault(x => x.CustomerId == item.CustomerId));
		}
		public RepositoryActionResult<Employee> Update(Employee item)
		{
			return Update<Employee>(item, _ctx.Employees.FirstOrDefault(x => x.EmployeeId == item.EmployeeId));
		}
		public RepositoryActionResult<EmployeeTerritory> Update(EmployeeTerritory item)
		{
			return Update<EmployeeTerritory>(item, _ctx.EmployeeTerritories.FirstOrDefault(
					x => x.EmployeeId == item.EmployeeId
					&& x.TerritoryId == item.TerritoryId));
		}
		public RepositoryActionResult<OrderDetail> Update(OrderDetail item)
		{
			return Update<OrderDetail>(item, _ctx.Order Details.FirstOrDefault(
					x => x.OrderId == item.OrderId
					&& x.ProductId == item.ProductId));
		}
		public RepositoryActionResult<Order> Update(Order item)
		{
			return Update<Order>(item, _ctx.Orders.FirstOrDefault(x => x.OrderId == item.OrderId));
		}
		public RepositoryActionResult<Product> Update(Product item)
		{
			return Update<Product>(item, _ctx.Products.FirstOrDefault(x => x.ProductId == item.ProductId));
		}
		public RepositoryActionResult<Region> Update(Region item)
		{
			return Update<Region>(item, _ctx.Regions.FirstOrDefault(x => x.RegionId == item.RegionId));
		}
		public RepositoryActionResult<Shipper> Update(Shipper item)
		{
			return Update<Shipper>(item, _ctx.Shippers.FirstOrDefault(x => x.ShipperId == item.ShipperId));
		}
		public RepositoryActionResult<Supplier> Update(Supplier item)
		{
			return Update<Supplier>(item, _ctx.Suppliers.FirstOrDefault(x => x.SupplierId == item.SupplierId));
		}
		public RepositoryActionResult<Sysdiagram> Update(Sysdiagram item)
		{
			return Update<Sysdiagram>(item, _ctx.sysdiagrams.FirstOrDefault(x => x.DiagramId == item.DiagramId));
		}
		public RepositoryActionResult<Territory> Update(Territory item)
		{
			return Update<Territory>(item, _ctx.Territories.FirstOrDefault(x => x.TerritoryId == item.TerritoryId));
		}

		#endregion Update

		#region Delete

			public RepositoryActionResult<Category> DeleteCategory(int categoryId)
			{
				return Delete<Category>(_ctx.Categories.Where(x => x.CategoryId == categoryId).FirstOrDefault());
			}
			public RepositoryActionResult<Category> Delete(Category item)
			{
				return Delete<Category>(_ctx.Categories.Where(x => x.CategoryId == item.CategoryId).FirstOrDefault());
			}
			public RepositoryActionResult<CustomerCustomerDemo> DeleteCustomerCustomerDemo(string customerId, string customerTypeId)
			{
				return Delete<CustomerCustomerDemo>(_ctx.CustomerCustomerDemos.Where(
						x => x.CustomerId == customerId
						&& x.CustomerTypeId == customerTypeId).FirstOrDefault());
			}
			public RepositoryActionResult<CustomerCustomerDemo> Delete(CustomerCustomerDemo item)
			{
				return Delete<CustomerCustomerDemo>(_ctx.CustomerCustomerDemos.Where(
						x => x.CustomerId == item.CustomerId
						&& x.CustomerTypeId == item.CustomerTypeId).FirstOrDefault());
			}
			public RepositoryActionResult<CustomerDemographic> DeleteCustomerDemographic(string customerTypeId)
			{
				return Delete<CustomerDemographic>(_ctx.CustomerDemographics.Where(x => x.CustomerTypeId == customerTypeId).FirstOrDefault());
			}
			public RepositoryActionResult<CustomerDemographic> Delete(CustomerDemographic item)
			{
				return Delete<CustomerDemographic>(_ctx.CustomerDemographics.Where(x => x.CustomerTypeId == item.CustomerTypeId).FirstOrDefault());
			}
			public RepositoryActionResult<Customer> DeleteCustomer(string customerId)
			{
				return Delete<Customer>(_ctx.Customers.Where(x => x.CustomerId == customerId).FirstOrDefault());
			}
			public RepositoryActionResult<Customer> Delete(Customer item)
			{
				return Delete<Customer>(_ctx.Customers.Where(x => x.CustomerId == item.CustomerId).FirstOrDefault());
			}
			public RepositoryActionResult<Employee> DeleteEmployee(int employeeId)
			{
				return Delete<Employee>(_ctx.Employees.Where(x => x.EmployeeId == employeeId).FirstOrDefault());
			}
			public RepositoryActionResult<Employee> Delete(Employee item)
			{
				return Delete<Employee>(_ctx.Employees.Where(x => x.EmployeeId == item.EmployeeId).FirstOrDefault());
			}
			public RepositoryActionResult<EmployeeTerritory> DeleteEmployeeTerritory(int employeeId, string territoryId)
			{
				return Delete<EmployeeTerritory>(_ctx.EmployeeTerritories.Where(
						x => x.EmployeeId == employeeId
						&& x.TerritoryId == territoryId).FirstOrDefault());
			}
			public RepositoryActionResult<EmployeeTerritory> Delete(EmployeeTerritory item)
			{
				return Delete<EmployeeTerritory>(_ctx.EmployeeTerritories.Where(
						x => x.EmployeeId == item.EmployeeId
						&& x.TerritoryId == item.TerritoryId).FirstOrDefault());
			}
			public RepositoryActionResult<OrderDetail> DeleteOrderDetail(int orderId, int productId)
			{
				return Delete<OrderDetail>(_ctx.Order Details.Where(
						x => x.OrderId == orderId
						&& x.ProductId == productId).FirstOrDefault());
			}
			public RepositoryActionResult<OrderDetail> Delete(OrderDetail item)
			{
				return Delete<OrderDetail>(_ctx.Order Details.Where(
						x => x.OrderId == item.OrderId
						&& x.ProductId == item.ProductId).FirstOrDefault());
			}
			public RepositoryActionResult<Order> DeleteOrder(int orderId)
			{
				return Delete<Order>(_ctx.Orders.Where(x => x.OrderId == orderId).FirstOrDefault());
			}
			public RepositoryActionResult<Order> Delete(Order item)
			{
				return Delete<Order>(_ctx.Orders.Where(x => x.OrderId == item.OrderId).FirstOrDefault());
			}
			public RepositoryActionResult<Product> DeleteProduct(int productId)
			{
				return Delete<Product>(_ctx.Products.Where(x => x.ProductId == productId).FirstOrDefault());
			}
			public RepositoryActionResult<Product> Delete(Product item)
			{
				return Delete<Product>(_ctx.Products.Where(x => x.ProductId == item.ProductId).FirstOrDefault());
			}
			public RepositoryActionResult<Region> DeleteRegion(int regionId)
			{
				return Delete<Region>(_ctx.Regions.Where(x => x.RegionId == regionId).FirstOrDefault());
			}
			public RepositoryActionResult<Region> Delete(Region item)
			{
				return Delete<Region>(_ctx.Regions.Where(x => x.RegionId == item.RegionId).FirstOrDefault());
			}
			public RepositoryActionResult<Shipper> DeleteShipper(int shipperId)
			{
				return Delete<Shipper>(_ctx.Shippers.Where(x => x.ShipperId == shipperId).FirstOrDefault());
			}
			public RepositoryActionResult<Shipper> Delete(Shipper item)
			{
				return Delete<Shipper>(_ctx.Shippers.Where(x => x.ShipperId == item.ShipperId).FirstOrDefault());
			}
			public RepositoryActionResult<Supplier> DeleteSupplier(int supplierId)
			{
				return Delete<Supplier>(_ctx.Suppliers.Where(x => x.SupplierId == supplierId).FirstOrDefault());
			}
			public RepositoryActionResult<Supplier> Delete(Supplier item)
			{
				return Delete<Supplier>(_ctx.Suppliers.Where(x => x.SupplierId == item.SupplierId).FirstOrDefault());
			}
			public RepositoryActionResult<Sysdiagram> DeleteSysdiagram(int diagramId)
			{
				return Delete<Sysdiagram>(_ctx.sysdiagrams.Where(x => x.DiagramId == diagramId).FirstOrDefault());
			}
			public RepositoryActionResult<Sysdiagram> Delete(Sysdiagram item)
			{
				return Delete<Sysdiagram>(_ctx.sysdiagrams.Where(x => x.DiagramId == item.DiagramId).FirstOrDefault());
			}
			public RepositoryActionResult<Territory> DeleteTerritory(string territoryId)
			{
				return Delete<Territory>(_ctx.Territories.Where(x => x.TerritoryId == territoryId).FirstOrDefault());
			}
			public RepositoryActionResult<Territory> Delete(Territory item)
			{
				return Delete<Territory>(_ctx.Territories.Where(x => x.TerritoryId == item.TerritoryId).FirstOrDefault());
			}

		#endregion Delete


	}
}
